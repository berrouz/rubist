Q1 У вас есть массив целых чисел. Все числа идут последовательно от 1 до k. 
Но в массиве пропущены 2 числа. Реализуйте алгоритм для нахождения этих чисел

find_missed_brute.rb
find_missed_optimized.rb

Улучшенный алгоритм нахождения 2 пропущенных чисел.

Для того, чтобы определить, какие числа пропущены, необходимо определить, на своем ли месте находится число.
Определение, на своем ли месте находится число, выглядит следующим образом:
def	right_position?
  element == index+1
end
То есть значение должно быть равно индексу увеличенному на 1.

К примеру, если есть массив, как в задании, от 1 до k, то первое пропущенное число определяется путем нахождения первого числа, которое стоит не на своем месте.

Так, если есть массив [1,2,3,5,6,7,8], мы можем проитерировать по каждому элементу из массива и, если встретим число, которое не своем месте(в нашем случае это 5), 
то мы с уверенностью можем сказать, что предыдущее число пропущено, то есть 5-1 = 4

Для нахождения 2 пропущенных чисел нам необходимо сложную задачу разделить на подзадачи, и каждую подзадачу решать вышеуказанным способом. А именно, если бы нам удалось правильным образом разбить массив на 2 массива, 
в котором было бы по одному числу, мы с легкостью решили бы задачу.

Однако, упомянутый способ решения не является оптимальным. Если k будет увеличиваться, то сложность алгоритма будет возрастать. 

Каким образом мы можем оптимизировать алгоритм нахождения двух пропущенных чисел.

К примеру, у нас есть массив [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 .. 5000 .. , 9995, . ,9997 , . , 9999, 10000]
Как видим, пропущены 2 числа в конце массива. Поэтому, можно было бы оптимизировать алгоритм, путем проверки, начиная сразу с числа 9996. 
Однако, определить с первого раза нахождение 1 пропущенного числа - задача из раздела теории вероятности. Тем не менее, мы могли бы определить, на своем ли месте находится средний элемент массива(элемент 5000), 
если он своем месте, то можно сразу сократить количество проверок на половину. 
Если этим же способом сокращать массив до тех пор, пока он будет равен 9995, . , 9997, . , 9999, 10000.
Такой массив, можно разделить на два 9995, ., 9997 и 9997, ., 9999 и определить уже известным способом, какие именно числа пропущены.

Если перейти к конкретной реализации, то:

1. Определяем средний элемент массива функцией mid_position
2. Сокращаем массив(сокращаем количество проверок)
  - если средний элемент находится на своем месте - возвращаем правую от этого элемента часть массива
	- если средний элемент на 1 больше, чем положено - это означает что мы должны разделить массив на 2 части и искать потерянное число в каждой части, используя функцию find_missed
	- если средний элемент на 2 больше, чем положено = это означает, что искомые числа находятся по левую сторону от среднего элемента, значит, мы возвращаем только левую часть массива.
	
	Если результат 2 массива - переходим к нахождению потерянного чиста в каждом из массивов.
	Если результат 2 массив, продолжаем сокращать массив до тех пор, пока функция не разделит массив на 2.
	Исключением является случай, когда 2 потерянных числа находятся по соседству, поэтому этот случай нужно отрабатывать отдельно(break if temp.first.adjacent? && temp.size == 1)
	
	def	find_two_missed
		raise ArgumentError, "array should miss 2 elements" if last < size+2
		temp = self
		temp = temp.shorten
		while temp.size < 2
			temp = temp.first.shorten
			puts temp.first.size
			break if temp.first.adjacent? && temp.size == 1
		end
		return temp.first.return_which_are_missed if temp.size ==1
		temp.map(&:find_missed)
	end
	
	


Q2 Какие ньюнсы работы виртуальной машины Ruby вы знаете?
Какие оптимизации над кодом можно произвести для ускорения его выполнения?


Q3 У вас есть массив объектов (10.000.000), хранящих данные о пользователях. 
Поля следующие:
- Пол(boolean)
- Возраст(0..100)
- Рост(0..300)
- Индекс(0..1000000)
- Сумма денег(0.0..1000000.0)
Приведите пример(реализацию на любом существующем языке программирования) максимально быстрого алгоритма
для выбора объектов по определенным условиям(количество условий может быть от 1 до 5) с учетом возможности
указаний диапазонов для числовых значений